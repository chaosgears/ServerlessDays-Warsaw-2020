{
  "service": {
    "service": "serverlessDays-Warsaw-guest-registration",
    "serviceObject": {
      "name": "serverlessDays-Warsaw-guest-registration"
    },
    "provider": {
      "stage": "dev",
      "variableSyntax": "\\${([^{}]+?)}",
      "name": "aws",
      "runtime": "python3.7",
      "region": "eu-central-1",
      "stack-name": "serverlessDays-Warsaw-registration-dev",
      "tags": {
        "Name": "serverlessDays-Warsaw-registration-serverlessDays-Warsaw-dev",
        "Environment": "dev",
        "Owner": "chaosgears",
        "Project": "serverlessDays-Warsaw-registration",
        "Application": "serverlessDays-Warsaw"
      },
      "environment": {
        "EMAIL": "aleksandra.iwoncz@chaosgears.com",
        "EMAIL1": "dziyana.hryshyna@chaosgears.com"
      },
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "AddDashguestDashregistrationDashapiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverlessDays-Warsaw-add-guest-registration-api"
            }
          },
          "CreateDashtableLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverlessDays-Warsaw-create-table"
            }
          },
          "CreateDashbucketLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverlessDays-Warsaw-create-bucket"
            }
          },
          "DeleteDashregistrationDashapiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverlessDays-Warsaw-delete-registration-api"
            }
          },
          "GenerateDashguestsDashlistLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverlessDays-Warsaw-generate-guests-list-api"
            }
          },
          "AddDashguestDashregistrationDashapiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverlessDays-Warsaw-guest-registration/dev/1589463566227-2020-05-14T13:39:26.227Z/serverlessDays-Warsaw-guest-registration.zip"
              },
              "FunctionName": "serverlessDays-Warsaw-add-guest-registration-api",
              "Handler": "functions/add_guest_registration_api.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "ServerlessDaysAddGuestRegistration",
                  "Arn"
                ]
              },
              "Runtime": "python3.7",
              "Timeout": 6,
              "Description": "Adds guest registration to table guest_registration",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "serverlessDays-Warsaw-registration-serverlessDays-Warsaw-dev"
                },
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Owner",
                  "Value": "chaosgears"
                },
                {
                  "Key": "Project",
                  "Value": "serverlessDays-Warsaw-registration"
                },
                {
                  "Key": "Application",
                  "Value": "serverlessDays-Warsaw"
                }
              ],
              "Environment": {
                "Variables": {
                  "EMAIL": "aleksandra.iwoncz@chaosgears.com",
                  "EMAIL1": "dziyana.hryshyna@chaosgears.com",
                  "REGION": "eu-central-1",
                  "TABLE_NAME": "serverless-days-warsaw-guest-registration"
                }
              }
            },
            "DependsOn": [
              "AddDashguestDashregistrationDashapiLogGroup",
              "ServerlessDaysAddGuestRegistration"
            ]
          },
          "AddDashguestDashregistrationDashapiLambdaVersionXBvJGjIkeBD85eCd6W1M7R0WiYW5ZIulDAlDnp3ovrY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddDashguestDashregistrationDashapiLambdaFunction"
              },
              "CodeSha256": "uSODe0Hm4TsuffZBbzU72X3+56bwGHYi7OZfjD8MDDk=",
              "Description": "Adds guest registration to table guest_registration"
            }
          },
          "CreateDashtableLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverlessDays-Warsaw-guest-registration/dev/1589463566227-2020-05-14T13:39:26.227Z/serverlessDays-Warsaw-guest-registration.zip"
              },
              "FunctionName": "serverlessDays-Warsaw-create-table",
              "Handler": "functions/create_table.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "ServerlessDaysCreateTableRole",
                  "Arn"
                ]
              },
              "Runtime": "python3.7",
              "Timeout": 6,
              "Description": "Creates a table that will store event guests",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "serverlessDays-Warsaw-registration-serverlessDays-Warsaw-dev"
                },
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Owner",
                  "Value": "chaosgears"
                },
                {
                  "Key": "Project",
                  "Value": "serverlessDays-Warsaw-registration"
                },
                {
                  "Key": "Application",
                  "Value": "serverlessDays-Warsaw"
                }
              ],
              "Environment": {
                "Variables": {
                  "EMAIL": "dziyana.hryshyna@chaosgears.com",
                  "EMAIL1": "aleksandra.iwoncz@chaosgears.com",
                  "REGION": "eu-central-1",
                  "TABLE_NAME": "serverless-days-warsaw-guest-registration"
                }
              }
            },
            "DependsOn": [
              "CreateDashtableLogGroup",
              "ServerlessDaysCreateTableRole"
            ]
          },
          "CreateDashtableLambdaVersiona20ANcIfhejVMriV1thCLgBPokZa4Mxl0LAP3Aho": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateDashtableLambdaFunction"
              },
              "CodeSha256": "uSODe0Hm4TsuffZBbzU72X3+56bwGHYi7OZfjD8MDDk=",
              "Description": "Creates a table that will store event guests"
            }
          },
          "CreateDashbucketLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverlessDays-Warsaw-guest-registration/dev/1589463566227-2020-05-14T13:39:26.227Z/serverlessDays-Warsaw-guest-registration.zip"
              },
              "FunctionName": "serverlessDays-Warsaw-create-bucket",
              "Handler": "functions/create_bucket.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "ServerlessDaysCreateBucketRole",
                  "Arn"
                ]
              },
              "Runtime": "python3.7",
              "Timeout": 6,
              "Description": "Creates a bucket in which the user list file will be stored",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "serverlessDays-Warsaw-registration-serverlessDays-Warsaw-dev"
                },
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Owner",
                  "Value": "chaosgears"
                },
                {
                  "Key": "Project",
                  "Value": "serverlessDays-Warsaw-registration"
                },
                {
                  "Key": "Application",
                  "Value": "serverlessDays-Warsaw"
                }
              ],
              "Environment": {
                "Variables": {
                  "EMAIL": "aleksandra.iwoncz@chaosgears.com",
                  "EMAIL1": "dziyana.hryshyna@chaosgears.com",
                  "REGION": "eu-central-1",
                  "BUCKET_NAME": "serverless-days-warsaw-private-bucket"
                }
              }
            },
            "DependsOn": [
              "CreateDashbucketLogGroup",
              "ServerlessDaysCreateBucketRole"
            ]
          },
          "CreateDashbucketLambdaVersioncfWv6R9f6JSyLmcPiNHlwb2SAoKDqbQPd95zJUfdli8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateDashbucketLambdaFunction"
              },
              "CodeSha256": "uSODe0Hm4TsuffZBbzU72X3+56bwGHYi7OZfjD8MDDk=",
              "Description": "Creates a bucket in which the user list file will be stored"
            }
          },
          "DeleteDashregistrationDashapiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverlessDays-Warsaw-guest-registration/dev/1589463566227-2020-05-14T13:39:26.227Z/serverlessDays-Warsaw-guest-registration.zip"
              },
              "FunctionName": "serverlessDays-Warsaw-delete-registration-api",
              "Handler": "functions/delete_registration_api.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "ServerlessDaysDeleteGuestRegistration",
                  "Arn"
                ]
              },
              "Runtime": "python3.7",
              "Timeout": 6,
              "Description": "Removes registration from database",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "serverlessDays-Warsaw-registration-serverlessDays-Warsaw-dev"
                },
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Owner",
                  "Value": "chaosgears"
                },
                {
                  "Key": "Project",
                  "Value": "serverlessDays-Warsaw-registration"
                },
                {
                  "Key": "Application",
                  "Value": "serverlessDays-Warsaw"
                }
              ],
              "Environment": {
                "Variables": {
                  "EMAIL": "aleksandra.iwoncz@chaosgears.com",
                  "EMAIL1": "dziyana.hryshyna@chaosgears.com",
                  "REGION": "eu-central-1",
                  "TABLE_NAME": "serverless-days-warsaw-guest-registration"
                }
              }
            },
            "DependsOn": [
              "DeleteDashregistrationDashapiLogGroup",
              "ServerlessDaysDeleteGuestRegistration"
            ]
          },
          "DeleteDashregistrationDashapiLambdaVersionUvkJJDs6Vr4MUMFY8jSdOcwkTN40s0sctwl2AMag": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteDashregistrationDashapiLambdaFunction"
              },
              "CodeSha256": "uSODe0Hm4TsuffZBbzU72X3+56bwGHYi7OZfjD8MDDk=",
              "Description": "Removes registration from database"
            }
          },
          "GenerateDashguestsDashlistLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverlessDays-Warsaw-guest-registration/dev/1589463566227-2020-05-14T13:39:26.227Z/serverlessDays-Warsaw-guest-registration.zip"
              },
              "FunctionName": "serverlessDays-Warsaw-generate-guests-list-api",
              "Handler": "functions/generate_guests_list_csv_api.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "ServerlessDaysGenerateGuestsList",
                  "Arn"
                ]
              },
              "Runtime": "python3.7",
              "Timeout": 6,
              "Description": "Generate list of guests that registrated to event in .csv format and put it to s3 bucket",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "serverlessDays-Warsaw-registration-serverlessDays-Warsaw-dev"
                },
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Owner",
                  "Value": "chaosgears"
                },
                {
                  "Key": "Project",
                  "Value": "serverlessDays-Warsaw-registration"
                },
                {
                  "Key": "Application",
                  "Value": "serverlessDays-Warsaw"
                }
              ],
              "Environment": {
                "Variables": {
                  "EMAIL": "aleksandra.iwoncz@chaosgears.com",
                  "EMAIL1": "dziyana.hryshyna@chaosgears.com",
                  "REGION": "eu-central-1",
                  "TABLE_NAME": "serverless-days-warsaw-guest-registration",
                  "BUCKET_NAME": "serverless-days-warsaw-private-bucket"
                }
              }
            },
            "DependsOn": [
              "GenerateDashguestsDashlistLogGroup",
              "ServerlessDaysGenerateGuestsList"
            ]
          },
          "GenerateDashguestsDashlistLambdaVersionisVJkNs4qWh9rBHyROL3ADKuZZTx5k8rzV2m3mCiGSY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GenerateDashguestsDashlistLambdaFunction"
              },
              "CodeSha256": "uSODe0Hm4TsuffZBbzU72X3+56bwGHYi7OZfjD8MDDk=",
              "Description": "Generate list of guests that registrated to event in .csv format and put it to s3 bucket"
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-serverlessDays-Warsaw-guest-registration",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceRegistration": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "registration",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRegistrationIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceRegistration"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRegistrationOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Access-Control-Allow-Headers,Access-Control-Allow-Origin,X-Requested-With'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceRegistration"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRegistrationIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Access-Control-Allow-Headers,Access-Control-Allow-Origin,X-Requested-With'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceRegistrationIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRegistrationPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRegistration"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddDashguestDashregistrationDashapiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": "{\"json\":$input.json(\"$\"), \"firstName\":\"$input.params(\"firstName\")\", \"lastName\":\"$input.params(\"lastName\")\", \\ \"email\":\"$input.params(\"email\")\", \"position\":\"$input.params(\"position\")\", \"organizationName\":\"$input.params(\"organizationName\")\", \\ \"technicalInterests\":\"$input.params(\"technicalInterests\")\", \"businessInterests\":\"$input.params(\"businessInterests\")\" }",
                  "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200,
                    "SelectionPattern": "",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 400,
                    "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 401,
                    "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 403,
                    "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 404,
                    "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 422,
                    "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 500,
                    "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 502,
                    "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 504,
                    "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 200
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 400
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 401
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 403
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 404
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 422
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 500
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 502
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 504
                }
              ]
            }
          },
          "ApiGatewayMethodRegistrationIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRegistrationIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteDashregistrationDashapiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": "{\"json\":$input.json(\"$\"), \"registration_id\":\"$input.params(\"id\")\"}",
                  "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200,
                    "SelectionPattern": "",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 400,
                    "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 401,
                    "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 403,
                    "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 404,
                    "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 422,
                    "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 500,
                    "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 502,
                    "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 504,
                    "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 200
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 400
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 401
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 403
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 404
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 422
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 500
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 502
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 504
                }
              ]
            }
          },
          "ApiGatewayDeployment1589463564351": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodRegistrationOptions",
              "ApiGatewayMethodRegistrationIdVarOptions",
              "ApiGatewayMethodRegistrationPost",
              "ApiGatewayMethodRegistrationIdVarDelete"
            ]
          },
          "AddDashguestDashregistrationDashapiLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddDashguestDashregistrationDashapiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteDashregistrationDashapiLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteDashregistrationDashapiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ServerlessDaysCreateTableRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Path": "/",
              "Policies": [
                {
                  "PolicyName": "serverlessDays-Warsaw-create-table",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:CreateTable"
                        ],
                        "Resource": [
                          "*"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "ServerlessDaysCreateBucketRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Path": "/",
              "Policies": [
                {
                  "PolicyName": "serverlessDays-Warsaw-create-bucket",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:CreateBucket",
                          "s3:PutObject"
                        ],
                        "Resource": [
                          "*"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "ServerlessDaysDeleteGuestRegistration": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Path": "/",
              "Policies": [
                {
                  "PolicyName": "serverlessDays-Warsaw-delete-guest-registration",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:DeleteItem"
                        ],
                        "Resource": [
                          "*"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "ServerlessDaysAddGuestRegistration": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Path": "/",
              "Policies": [
                {
                  "PolicyName": "serverlessDays-Warsaw-add-guest-registration",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "ses:SendEmail",
                          "ses:SendTemplatedEmail",
                          "ses:CreateTemplate",
                          "ses:DeleteTemplate",
                          "dynamodb:PutItem"
                        ],
                        "Resource": [
                          "*"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "ServerlessDaysGenerateGuestsList": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Path": "/",
              "Policies": [
                {
                  "PolicyName": "serverlessDays-Warsaw-generate-guests_list",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:Scan",
                          "s3:PutObject"
                        ],
                        "Resource": [
                          "*"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "AddDashguestDashregistrationDashapiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddDashguestDashregistrationDashapiLambdaVersionXBvJGjIkeBD85eCd6W1M7R0WiYW5ZIulDAlDnp3ovrY"
            }
          },
          "CreateDashtableLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateDashtableLambdaVersiona20ANcIfhejVMriV1thCLgBPokZa4Mxl0LAP3Aho"
            }
          },
          "CreateDashbucketLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateDashbucketLambdaVersioncfWv6R9f6JSyLmcPiNHlwb2SAoKDqbQPd95zJUfdli8"
            }
          },
          "DeleteDashregistrationDashapiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteDashregistrationDashapiLambdaVersionUvkJJDs6Vr4MUMFY8jSdOcwkTN40s0sctwl2AMag"
            }
          },
          "GenerateDashguestsDashlistLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GenerateDashguestsDashlistLambdaVersionisVJkNs4qWh9rBHyROL3ADKuZZTx5k8rzV2m3mCiGSY"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "region": "eu-central-1",
      "service_acronym": "serverlessDays-Warsaw",
      "app": "serverlessDays-Warsaw-registration",
      "service": "serverlessDays-Warsaw",
      "tablename": "serverlessDays-Warsaw-registration-serverlessDays-Warsaw-dev",
      "stage": "dev",
      "allowed-headers": [
        "Content-Type",
        "X-Amz-Date",
        "Authorization",
        "X-Api-Key",
        "X-Amz-Security-Token",
        "X-Amz-User-Agent",
        "Access-Control-Allow-Headers",
        "Access-Control-Allow-Origin",
        "X-Requested-With"
      ]
    },
    "pluginsData": {},
    "functions": {
      "add-guest-registration-api": {
        "name": "serverlessDays-Warsaw-add-guest-registration-api",
        "description": "Adds guest registration to table guest_registration",
        "handler": "functions/add_guest_registration_api.handler",
        "role": "ServerlessDaysAddGuestRegistration",
        "environment": {
          "REGION": "eu-central-1",
          "TABLE_NAME": "serverless-days-warsaw-guest-registration"
        },
        "events": [
          {
            "http": {
              "path": "registration",
              "method": "post",
              "integration": "AWS",
              "cors": {
                "origin": "*",
                "headers": {
                  "$ref": "$[\"service\"][\"custom\"][\"allowed-headers\"]"
                },
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "allowCredentials": false
              },
              "origins": [
                "*"
              ],
              "request": {
                "template": {
                  "application/json": "{\"json\":$input.json(\"$\"), \"firstName\":\"$input.params(\"firstName\")\", \"lastName\":\"$input.params(\"lastName\")\", \\ \"email\":\"$input.params(\"email\")\", \"position\":\"$input.params(\"position\")\", \"organizationName\":\"$input.params(\"organizationName\")\", \\ \"technicalInterests\":\"$input.params(\"technicalInterests\")\", \"businessInterests\":\"$input.params(\"businessInterests\")\" }"
                },
                "passThrough": "NEVER"
              },
              "response": {
                "statusCodes": {
                  "200": {
                    "pattern": ""
                  },
                  "400": {
                    "pattern": "[\\s\\S]*\\[400\\][\\s\\S]*"
                  },
                  "401": {
                    "pattern": "[\\s\\S]*\\[401\\][\\s\\S]*"
                  },
                  "403": {
                    "pattern": "[\\s\\S]*\\[403\\][\\s\\S]*"
                  },
                  "404": {
                    "pattern": "[\\s\\S]*\\[404\\][\\s\\S]*"
                  },
                  "422": {
                    "pattern": "[\\s\\S]*\\[422\\][\\s\\S]*"
                  },
                  "500": {
                    "pattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*"
                  },
                  "502": {
                    "pattern": "[\\s\\S]*\\[502\\][\\s\\S]*"
                  },
                  "504": {
                    "pattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)"
                  }
                }
              }
            }
          }
        ],
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "AddDashguestDashregistrationDashapiLambdaVersionXBvJGjIkeBD85eCd6W1M7R0WiYW5ZIulDAlDnp3ovrY"
      },
      "create-table": {
        "name": "serverlessDays-Warsaw-create-table",
        "description": "Creates a table that will store event guests",
        "handler": "functions/create_table.handler",
        "role": "ServerlessDaysCreateTableRole",
        "environment": {
          "REGION": "eu-central-1",
          "TABLE_NAME": "serverless-days-warsaw-guest-registration",
          "EMAIL": "dziyana.hryshyna@chaosgears.com",
          "EMAIL1": "aleksandra.iwoncz@chaosgears.com"
        },
        "events": [],
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "CreateDashtableLambdaVersiona20ANcIfhejVMriV1thCLgBPokZa4Mxl0LAP3Aho"
      },
      "create-bucket": {
        "name": "serverlessDays-Warsaw-create-bucket",
        "description": "Creates a bucket in which the user list file will be stored",
        "handler": "functions/create_bucket.handler",
        "role": "ServerlessDaysCreateBucketRole",
        "environment": {
          "REGION": "eu-central-1",
          "BUCKET_NAME": "serverless-days-warsaw-private-bucket"
        },
        "events": [],
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "CreateDashbucketLambdaVersioncfWv6R9f6JSyLmcPiNHlwb2SAoKDqbQPd95zJUfdli8"
      },
      "delete-registration-api": {
        "name": "serverlessDays-Warsaw-delete-registration-api",
        "description": "Removes registration from database",
        "handler": "functions/delete_registration_api.handler",
        "role": "ServerlessDaysDeleteGuestRegistration",
        "environment": {
          "REGION": "eu-central-1",
          "TABLE_NAME": "serverless-days-warsaw-guest-registration"
        },
        "events": [
          {
            "http": {
              "path": "registration/{id}",
              "method": "delete",
              "integration": "AWS",
              "cors": {
                "origin": "*",
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "Access-Control-Allow-Headers",
                  "Access-Control-Allow-Origin",
                  "X-Requested-With"
                ],
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "allowCredentials": false
              },
              "origins": [
                "*"
              ],
              "request": {
                "template": {
                  "application/json": "{\"json\":$input.json(\"$\"), \"registration_id\":\"$input.params(\"id\")\"}"
                },
                "passThrough": "NEVER"
              },
              "response": {
                "statusCodes": {
                  "$ref": "$[\"service\"][\"functions\"][\"add-guest-registration-api\"][\"events\"][0][\"http\"][\"response\"][\"statusCodes\"]"
                }
              }
            }
          }
        ],
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "DeleteDashregistrationDashapiLambdaVersionUvkJJDs6Vr4MUMFY8jSdOcwkTN40s0sctwl2AMag"
      },
      "generate-guests-list": {
        "name": "serverlessDays-Warsaw-generate-guests-list-api",
        "description": "Generate list of guests that registrated to event in .csv format and put it to s3 bucket",
        "handler": "functions/generate_guests_list_csv_api.handler",
        "role": "ServerlessDaysGenerateGuestsList",
        "environment": {
          "REGION": "eu-central-1",
          "TABLE_NAME": "serverless-days-warsaw-guest-registration",
          "BUCKET_NAME": "serverless-days-warsaw-private-bucket"
        },
        "events": [],
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "GenerateDashguestsDashlistLambdaVersionisVJkNs4qWh9rBHyROL3ADKuZZTx5k8rzV2m3mCiGSY"
      }
    },
    "resources": {
      "Resources": {
        "ServerlessDaysCreateTableRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Path": "/",
            "Policies": [
              {
                "PolicyName": "serverlessDays-Warsaw-create-table",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:CreateTable"
                      ],
                      "Resource": [
                        "*"
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "ServerlessDaysCreateBucketRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Path": "/",
            "Policies": [
              {
                "PolicyName": "serverlessDays-Warsaw-create-bucket",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:CreateBucket",
                        "s3:PutObject"
                      ],
                      "Resource": [
                        "*"
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "ServerlessDaysDeleteGuestRegistration": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Path": "/",
            "Policies": [
              {
                "PolicyName": "serverlessDays-Warsaw-delete-guest-registration",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:DeleteItem"
                      ],
                      "Resource": [
                        "*"
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "ServerlessDaysAddGuestRegistration": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Path": "/",
            "Policies": [
              {
                "PolicyName": "serverlessDays-Warsaw-add-guest-registration",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "ses:SendEmail",
                        "ses:SendTemplatedEmail",
                        "ses:CreateTemplate",
                        "ses:DeleteTemplate",
                        "dynamodb:PutItem"
                      ],
                      "Resource": [
                        "*"
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "ServerlessDaysGenerateGuestsList": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Path": "/",
            "Policies": [
              {
                "PolicyName": "serverlessDays-Warsaw-generate-guests_list",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:Scan",
                        "s3:PutObject"
                      ],
                      "Resource": [
                        "*"
                      ]
                    }
                  ]
                }
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "serviceFilename": "serverless.yml",
    "app": "serverlessDays-Warsaw",
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "D:\\AWS\\ServerlessDays-Warsaw-2020\\serverless\\.serverless\\serverlessDays-Warsaw-guest-registration.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/serverlessDays-Warsaw-guest-registration/dev/1589463566227-2020-05-14T13:39:26.227Z",
    "artifact": "serverlessDays-Warsaw-guest-registration.zip"
  }
}