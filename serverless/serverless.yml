service: serverlessDays-Warsaw-guest-registration
app: serverlessDays-Warsaw

provider:
  name: aws
  runtime: python3.7
  region: eu-central-1
  stack-name: ${self:custom.app}-${self:custom.stage}
  stage: dev
  tags:
    Name: ${self:custom.tablename}
    Environment: ${self:custom.stage}
    Owner: chaosgears
    Project: ${self:custom.app}
    Application: ${self:custom.service_acronym}

custom:
  region: ${opt:region, self:provider.region}
  service-acronym: serverlessDays-Warsaw
  app: serverlessDays-Warsaw-registration
  service: serverlessDays-Warsaw
  tablename: ${self:custom.app}-${self:custom.service_acronym}-${self:custom.stage}
  stage: ${opt:stage, self:provider.stage}
  allowed-headers:
    - Content-Type
    - X-Amz-Date
    - Authorization
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - Access-Control-Allow-Headers
    - Access-Control-Allow-Origin
    - X-Requested-With

functions:
  add-guest-registration-api:
    name: ${self:custom.app}-${self:custom.service_acronym}-add-guest-registration-api
    description: Adds guest registration to table guest_registration
    handler: functions/add_guest_registration.handler
    role: ServerlessDaysAddGuestRegistration
    environment:
        REGION: eu-central-1
        TABLE_NAME: serverless-days-warsaw-guest-registration
    events:
      - http:
          path: registration/
          method: post
          integration: lambda
          cors:
              origin: "*"
              headers: ${self:custom.allowed-headers}
          origins:
            - "*"
          request:
            template:
              application/json: '{"json":$input.json("$"), "firstName":"$input.params("firstName")", "lastName":"$input.params("lastName")", \
                                  "email":"$input.params("email")", "position":"$input.params("position")", "organizationName":"$input.params("organizationName")", \
                                  "technicalInterests":"$input.params("technicalInterests")", "businessInterests":"$input.params("businessInterests")" }'
  create-table:
    name: ${self:custom.app}-${self:custom.service_acronym}-create-table
    description: Creates a table that will store event guests
    handler: functions/create_table.handler
    role: ServerlessDaysCreateTableRole
    environment:
        REGION: eu-central-1
        TABLE_NAME: serverless-days-warsaw-guest-registration
  delete-registration-api:
    name: ${self:custom.app}-${self:custom.service_acronym}-delete-registration-api
    description: Removes registration from database
    handler: functions/delete_registration_api.handler
    role: ServerlessDaysDeleteGuestRegistration
    environment:
        REGION: eu-central-1
        TABLE_NAME: serverless-days-warsaw-guest-registration
    events:
      - http:
          path: registration/{id}
          method: delete
          integration: lambda
          cors:
              origin: "*"
              headers: ${self:custom.allowed-headers}
          origins:
            - "*"
          request:
            template:
              application/json: '{"json":$input.json("$"), "registration_id":"$input.params("id")"}'
  generate-guests-list:
    name: ${self:custom.app}-${self:custom.service_acronym}-generate-guests-list-api
    description: Generate list of guests that registrated to event in .csv format and put it to s3 bucket
    handler: functions/generate_guest_list_csv.handler
    role: ServerlessDaysGenerateGuestsList
    environment:
        REGION: eu-central-1
        TABLE_NAME: serverless-days-warsaw-guest-registration
        PUBLIC_BUCKET: serverless-days-warsaw
    # events:
    #   - http:
    #       path: registration/{id}
    #       method: delete
    #       integration: lambda
    #       cors:
    #           origin: "*"
    #           headers: ${self:custom.allowed-headers}
    #       origins:
    #         - "*"
  
  
resources:
  - ${file(resources/serverlessDaysWarsaw-iam-execution-roles.yml)}
